}
head(pt)
library(dplyr)
pt <- pt %>%
mutate(Extraversion = 20 + Q3_1 - Q3_6 + Q5_1 - Q5_6 + Q9_1 - Q9_6 + Q11_1 - Q11_6 + Q12_1 - Q12_6,
Agreeableness= 14 - Q3_2 + Q3_7 - Q5_2 + Q5_7 - Q9_2 + Q9_7 - Q11_2 + Q11_7 + Q12_2 + Q12_7,
Conscientiousness=  14 + Q3_3 - Q3_8 + Q5_3 - Q5_8 + Q9_3 - Q9_8 + Q11_3 - Q11_8 + Q12_3 + Q12_8,
Neuroticism= 38 - Q3_4 + Q3_9 - Q5_4 + Q5_9 - Q9_4 - Q9_9 - Q11_4 - Q11_9 - Q12_4 - Q12_9,
Openness= 8 + Q3_5 - Q3_10 + Q5_5 - Q5_10 + Q9_5 - Q9_10 + Q11_5 + Q11_10 + Q12_5 + Q12_10)
pt
# Taiwan showed up several times because there were some empty spaces in the string
pt$Q18 = trimws(pt$Q18)
names(pt)[15] <- "Profession"
names(pt)[22] <- "origin_country"
names(pt)[20] <- "Gender"
names(pt)[17] <- "Sector"
names(pt)[21] <- "Bachelors"
head(pt)
country <- c("origin_country")
# remane row values
for (i in 1:length(country)){
pt[which(pt[,country[i]]==""), country[i]] <- "Not answered"
}
# shortening profession sectors:
profession <- c("Sector")
pt<-read.csv("Data Scientist Traits_October 11, 2020_07.57.csv")
head(pt)
colnames(pt)
#Create vector containing all personality questions
questions<- c("Q3_1","Q3_2","Q3_3","Q3_4","Q3_5","Q3_6","Q3_7","Q3_8","Q3_9","Q3_10",
"Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6","Q5_7","Q5_8","Q5_9","Q5_10",
"Q9_1","Q9_2","Q9_3","Q9_4","Q9_5","Q9_6","Q9_7","Q9_8","Q9_9","Q9_10",
"Q11_1","Q11_2","Q11_3","Q11_4","Q11_5","Q11_6","Q11_7","Q11_8","Q11_9","Q11_10",
"Q12_1","Q12_2","Q12_3","Q12_4","Q12_5","Q12_6","Q12_7","Q12_8","Q12_9","Q12_10")
questions
question_levels = c("1", "2", "3", "4", "5")
# remane row values
for (i in 1:length(questions)){
pt[which(pt[,questions[i]]=='Disagree'), questions[i]] <- 1
pt[which(pt[,questions[i]]=='Somewhat Disagree'), questions[i]] <- 2
pt[which(pt[,questions[i]]=='Neutral'), questions[i]] <- 3
pt[which(pt[,questions[i]]=='Somewhat Agree'), questions[i]] <- 4
pt[which(pt[,questions[i]]=='Agree'), questions[i]] <- 5
}
head(pt)
# works (redundant)
for (i in 1:length(questions)){
pt[,questions[i]] <- as.numeric(pt[,questions[i]])
}
head(pt)
library(dplyr)
pt <- pt %>%
mutate(Extraversion = 20 + Q3_1 - Q3_6 + Q5_1 - Q5_6 + Q9_1 - Q9_6 + Q11_1 - Q11_6 + Q12_1 - Q12_6,
Agreeableness= 14 - Q3_2 + Q3_7 - Q5_2 + Q5_7 - Q9_2 + Q9_7 - Q11_2 + Q11_7 + Q12_2 + Q12_7,
Conscientiousness=  14 + Q3_3 - Q3_8 + Q5_3 - Q5_8 + Q9_3 - Q9_8 + Q11_3 - Q11_8 + Q12_3 + Q12_8,
Neuroticism= 38 - Q3_4 + Q3_9 - Q5_4 + Q5_9 - Q9_4 - Q9_9 - Q11_4 - Q11_9 - Q12_4 - Q12_9,
Openness= 8 + Q3_5 - Q3_10 + Q5_5 - Q5_10 + Q9_5 - Q9_10 + Q11_5 + Q11_10 + Q12_5 + Q12_10)
pt
# Taiwan showed up several times because there were some empty spaces in the string
pt$Q18 = trimws(pt$Q18)
names(pt)[15] <- "Profession"
names(pt)[22] <- "origin_country"
names(pt)[20] <- "Gender"
names(pt)[17] <- "Sector"
names(pt)[21] <- "Bachelors"
head(pt)
country <- c("origin_country")
# remane row values
for (i in 1:length(country)){
pt[which(pt[,country[i]]==""), country[i]] <- "Not answered"
}
# shortening profession sectors:
profession <- c("Sector")
# remane row values
for (i in 1:length(profession)){
pt[which(pt[,profession[i]]=="Communications"), profession[i]] <- "Comm"
pt[which(pt[,profession[i]]=="Manufacturing"), profession[i]] <- "Mfg"
pt[which(pt[,profession[i]]=="Government"), profession[i]] <- "Gov't"
pt[which(pt[,profession[i]]=="Legal Services"), profession[i]] <- "Legal"
pt[which(pt[,profession[i]]=="Supply Chain"), profession[i]] <- "SCM"
pt[which(pt[,profession[i]]=="eCommerce"), profession[i]] <- "eComm"
pt[which(pt[,profession[i]]=="Identity and Access Management"), profession[i]] <- "IAM"
pt[which(pt[,profession[i]]=="Construction"), profession[i]] <- "Constrn"
pt[which(pt[,profession[i]]=="Transportation"), profession[i]] <- "Transp"
}
# countries, but the barplot would not work for it for some reason
library(ggplot2)
ggplot(pt, aes(origin_country)) +
geom_bar(aes(color = origin_country, fill = origin_country)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mytable <- table(pt$Gender)
mytable
lbls <- paste(names(mytable), "\n", mytable, sep="")
colors = c("red", "blue", "green")
pie11 <- pie(mytable, labels = lbls, col = colors,
main="Pie Chart of Gender \n of BAIM Graduates")
# Extraversion
Extravesion_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Extraversion_avg) %>%
arrange(desc(Extraversion_avg))
Extravesion_col
Extravesion_col<-as.data.frame(Extravesion_col)
Extravesion_col
extraversion <- ggplot(Extravesion_col, aes(x = as.factor(Profession), y = Extraversion_avg, group = Sector)) +
geom_col(aes(fill = Sector), color="black") +
geom_text(aes(label = paste(round(Extraversion_avg,0),"=",Sector)), position = position_stack(vjust = 0.5), colour = "black") +
labs(y = "Average Extraversion by Profession", x="")
extraversion
# Agreeableness
Agreeableness_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Agreeableness_avg) %>%
arrange(desc(Agreeableness_avg))
Agreeableness_col
Agreeableness_col<-as.data.frame(Agreeableness_col)
Agreeableness_col
agreeableness <- ggplot(Agreeableness_col, aes(x = as.factor(Profession), y = Agreeableness_avg, group = Sector)) +
geom_col(aes(fill = Sector), color="black") +
geom_text(aes(label = paste(round(Agreeableness_avg,0),"=",Sector)), position = position_stack(vjust = 0.5), colour = "black") +
labs(y = "Average Agreeableness by Profession", x="")
agreeableness
# Conscientiousness
Conscientiousness_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Conscientiousness_avg) %>%
arrange(desc(Conscientiousness_avg))
Conscientiousness_col
Conscientiousness_col<-as.data.frame(Conscientiousness_col)
Conscientiousness_col
# Agreeableness
Agreeableness_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Agreeableness_avg) %>%
arrange(desc(Agreeableness_avg))
Agreeableness_col
Agreeableness_col<-as.data.frame(Agreeableness_col)
Agreeableness_col
agreeableness <- ggplot(Agreeableness_col, aes(x = as.factor(Profession), y = Agreeableness_avg, group = Sector)) +
geom_col(aes(fill = Sector), color="black") +
geom_text(aes(label = paste(round(Agreeableness_avg,0),"=",Sector)), position = position_stack(vjust = 0.5), colour = "black") +
labs(y = "Average Agreeableness by Profession", x="")
agreeableness
pt<-read.csv("Data Scientist Traits_October 11, 2020_07.57.csv")
head(pt)
colnames(pt)
#Create vector containing all personality questions
questions<- c("Q3_1","Q3_2","Q3_3","Q3_4","Q3_5","Q3_6","Q3_7","Q3_8","Q3_9","Q3_10",
"Q5_1","Q5_2","Q5_3","Q5_4","Q5_5","Q5_6","Q5_7","Q5_8","Q5_9","Q5_10",
"Q9_1","Q9_2","Q9_3","Q9_4","Q9_5","Q9_6","Q9_7","Q9_8","Q9_9","Q9_10",
"Q11_1","Q11_2","Q11_3","Q11_4","Q11_5","Q11_6","Q11_7","Q11_8","Q11_9","Q11_10",
"Q12_1","Q12_2","Q12_3","Q12_4","Q12_5","Q12_6","Q12_7","Q12_8","Q12_9","Q12_10")
questions
question_levels = c("1", "2", "3", "4", "5")
# remane row values
for (i in 1:length(questions)){
pt[which(pt[,questions[i]]=='Disagree'), questions[i]] <- 1
pt[which(pt[,questions[i]]=='Somewhat Disagree'), questions[i]] <- 2
pt[which(pt[,questions[i]]=='Neutral'), questions[i]] <- 3
pt[which(pt[,questions[i]]=='Somewhat Agree'), questions[i]] <- 4
pt[which(pt[,questions[i]]=='Agree'), questions[i]] <- 5
}
head(pt)
# works (redundant)
for (i in 1:length(questions)){
pt[,questions[i]] <- as.numeric(pt[,questions[i]])
}
head(pt)
library(dplyr)
pt <- pt %>%
mutate(Extraversion = 20 + Q3_1 - Q3_6 + Q5_1 - Q5_6 + Q9_1 - Q9_6 + Q11_1 - Q11_6 + Q12_1 - Q12_6,
Agreeableness= 14 - Q3_2 + Q3_7 - Q5_2 + Q5_7 - Q9_2 + Q9_7 - Q11_2 + Q11_7 + Q12_2 + Q12_7,
Conscientiousness=  14 + Q3_3 - Q3_8 + Q5_3 - Q5_8 + Q9_3 - Q9_8 + Q11_3 - Q11_8 + Q12_3 + Q12_8,
Neuroticism= 38 - Q3_4 + Q3_9 - Q5_4 + Q5_9 - Q9_4 - Q9_9 - Q11_4 - Q11_9 - Q12_4 - Q12_9,
Openness= 8 + Q3_5 - Q3_10 + Q5_5 - Q5_10 + Q9_5 - Q9_10 + Q11_5 + Q11_10 + Q12_5 + Q12_10)
pt
pt
pt$Q18 = trimws(pt$Q18)
# Actuarial Science also showed up several times, so needed to trim
pt$Q18 = trimws(pt$Q19)
names(pt)[15] <- "Profession"
names(pt)[22] <- "origin_country"
names(pt)[20] <- "Gender"
names(pt)[17] <- "Sector"
names(pt)[21] <- "Bachelors"
head(pt)
country <- c("origin_country")
# remane row values
for (i in 1:length(country)){
pt[which(pt[,country[i]]==""), country[i]] <- "Not answered"
}
# shortening profession sectors:
profession <- c("Sector")
# remane row values
for (i in 1:length(profession)){
pt[which(pt[,profession[i]]=="Communications"), profession[i]] <- "Comm"
pt[which(pt[,profession[i]]=="Manufacturing"), profession[i]] <- "Mfg"
pt[which(pt[,profession[i]]=="Government"), profession[i]] <- "Gov't"
pt[which(pt[,profession[i]]=="Legal Services"), profession[i]] <- "Legal"
pt[which(pt[,profession[i]]=="Supply Chain"), profession[i]] <- "SCM"
pt[which(pt[,profession[i]]=="eCommerce"), profession[i]] <- "eComm"
pt[which(pt[,profession[i]]=="Identity and Access Management"), profession[i]] <- "IAM"
pt[which(pt[,profession[i]]=="Construction"), profession[i]] <- "Constrn"
pt[which(pt[,profession[i]]=="Transportation"), profession[i]] <- "Transp"
}
# countries, but the barplot would not work for it for some reason
library(ggplot2)
ggplot(pt, aes(origin_country)) +
geom_bar(aes(color = origin_country, fill = origin_country)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mytable <- table(pt$Gender)
mytable
lbls <- paste(names(mytable), "\n", mytable, sep="")
colors = c("red", "blue", "green")
pie11 <- pie(mytable, labels = lbls, col = colors,
main="Pie Chart of Gender \n of BAIM Graduates")
# Extraversion
Extravesion_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Extraversion_avg) %>%
arrange(desc(Extraversion_avg))
Extravesion_col
Extravesion_col<-as.data.frame(Extravesion_col)
Extravesion_col
extraversion <- ggplot(Extravesion_col, aes(x = as.factor(Profession), y = Extraversion_avg, group = Sector)) +
geom_col(aes(fill = Sector), color="black") +
geom_text(aes(label = paste(round(Extraversion_avg,0),"=",Sector)), position = position_stack(vjust = 0.5), colour = "black") +
labs(y = "Average Extraversion by Profession", x="")
extraversion
# Agreeableness
Agreeableness_col <- pt %>%
group_by(Profession, Sector)%>%
mutate(Extraversion_avg = mean(Extraversion),
Agreeableness_avg = mean(Agreeableness),
Conscientiousness_avg = mean(Conscientiousness),
Neuroticism_avg = mean(Neuroticism),
Openness_avg = mean(Openness)) %>%
distinct(Agreeableness_avg) %>%
arrange(desc(Agreeableness_avg))
Agreeableness_col
Agreeableness_col<-as.data.frame(Agreeableness_col)
Agreeableness_col
library(shiny); runApp('personality.R')
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput(inputId = 'clusters',
label = "Cluster count",
value = 3, min = 1, max = 9),
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
sliderInput(inputId = 'clusters',
label = "Cluster count",
value = 3, min = 1, max = 9),
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(RColorBrewer)
tr<-read.csv("train.csv")
palettes<- c("Spectral","PiYG","Paired","Set3","PuBu","YlGn","PuRd")
palette_length<-c(11,11,12,12,9,9,9)
colorsNeeded <-function(dataVar,palette_length) {
n<-max(min(palette_length),ncol(dataVar))
return(n)
}
ui <- fluidPage(
headerPanel('Train Dataset'),
sidebarPanel(
selectInput('Neighborhood', 'Neighborhood', as.character(tr$Neighborhood),selected="CollgCr",multiple=TRUE),
sliderInput('SalePriceMin', 'Sale Price Minimum', 10000,
min = 10000, max = 700000),
sliderInput('SalePriceMax', 'Sale Price Minimum', 700000,
min = 10000, max = 700000),
sliderInput('TotRmsAbvGrd','Minimum Total Rooms Above Grade',0,min=0,max=14),
selectInput('Palette', 'Choose palette:', palettes,selected="PuBu",multiple=FALSE),
),
mainPanel(
plotOutput('plot1'),
plotOutput('plot2'),
dataTableOutput('table1'),
actionButton("ExportButton", "Export table data"),
textInput("FileName","Choose a name for export file"),
textOutput("text1")
)
)
server <- function(input, output) {
tableSelectedData <- reactive({
tr<-tr[which(tr$Neighborhood==input$Neighborhood & tr$SalePrice>=input$SalePriceMin &tr$SalePrice<=input$SalePriceMax & tr$TotRmsAbvGrd>=input$TotRmsAbvGrd),]
})
plotSelectedData <- reactive({
tr<-tr[which(tr$Neighborhood==input$Neighborhood & tr$SalePrice>=input$SalePriceMin &tr$SalePrice<=input$SalePriceMax & tr$TotRmsAbvGrd>=input$TotRmsAbvGrd),"SalePrice"]
})
output$plot1 <- renderPlot({
hist(plotSelectedData(),main="Histogram of price for selected neighborhood, rooms and price range",col=brewer.pal(colorsNeeded(tableSelectedData,palette_length),input$Palette),xlab="Price")
})
output$plot2 <- renderPlot({
ggplot(tableSelectedData(),aes(x=as.factor(TotRmsAbvGrd),y=SalePrice,fill=factor(Neighborhood)))+scale_fill_brewer(palette=input$Palette)+geom_boxplot()+labs(title="Boxplot of price by total rooms above grade",x="Total Rooms Above Grade", y="Price",fill="Neighborhood")+scale_y_continuous(labels=scales::dollar_format())
})
output$table1 <- renderDataTable({
data.frame(tableSelectedData())
})
observeEvent(input$ExportButton, {
if (is.null(input$FileName)){
write.csv(tableSelectedData(),"ExportedTable.csv")}
else {
write.csv(tableSelectedData(),paste(input$FileName,".csv"))
}
})
}
shinyApp(ui = ui, server = server)
getwd()
setwd("C:\kafka")
setwd("C:/kafka")
getwd()
capitalbikeshare<-read.csv("capitalbikeshare.csv")
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
head(csb_member,2)
head(cbs_member,2)
min(cbs_member)
filter(cbs_member, Member.type == min(Member.type))
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type) %>%
filter(cbs_member, Duration== min(Duration))
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
filter(cbs_member, Duration== min(Duration))
cbs_member$Member.type <-trimws(cbs_member$Member.type)
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
unique(cbs_member$Member.type)
cbs_member
filter(cbs_member, Duration== min(Duration))
cbs_member$Duration <-trimws(cbs_member$Duration, which = c('both'))
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
cbs_member$Duration <-trimws(cbs_member$Duration, which = c('both'))
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
rm(capitalbikeshare)
rm(original_books)
rm(tidy_books)
rm(pt,ot_new,stop_words,text_df, tr,ui)
rm(country, counts, palette_length)
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
cbs_member$Duration <-trimws(cbs_member$Duration, which = c('both'))
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
cbs_member$Duration <-trimws(cbs_member$Duration)
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
cbs_member$Duration <-trimws(cbs_member$Duration)
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
unique(cbs_member$Member.type)
filter(cbs_member, Duration== min(Duration))
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)
cbs_member$Member.type <-trimws(cbs_member$Member.type, which = c('both'))
unique(cbs_member$Member.type)
group_by(cbs_member$Member.type)
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)%>%
filter(Duration== min(Duration))
cbs_member
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
library(dplyr)
cbs_member <- cbs %>%
group_by(Member.type)%>%
select(Duration, Member.type)%>%
summarize()
aggregare(cbs$Duration, by=list(Category = csb$Member.type), FUN=min)
aggregare(cbs, by=list(csb$Member.type), FUN=min)
aggregate(cbs$Duration, by=list(Category = csb$Member.type),FUN=min)
aggregate(cbs$Duration, by=list(Category = cbs$Member.type),FUN=min)
setwd("C:/kafka")
getwd()
cbs<-read.csv("capitalbikeshare.csv")
setwd("C:/kafka")
getwd()
cbs<-read.csv("capitalbikeshare.csv")
head(cbs, 3)
aggregate(cbs$Duration, by=list(Category = cbs$Member.type),FUN=min)
